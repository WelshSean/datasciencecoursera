sat
?select
?gather
?seperate
?separate
sat %>%
select(-contains(total))
sat %>%
select(-contains("total"))
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range)
at %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex,c("part","sex"))
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex,c("part","sex"))
submit()
?group_by
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by("part", "sex")
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex)
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_date)
wday(this_day)
wday(this_day, label=TRUE)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
second(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dtl
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
thus_moment
this_moment
update(this_moment, now())
update(this_moment, hours=10, minutes=16, seconds=0
)
update(this_moment, hours=10, minutes=16, seconds=0)
this_moment <- update(this_moment, hours=10, minutes=16, seconds=0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc +days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart +hours(15) + minutes(5)
arrive <- depart +hours(15) + minutes(50)
with_tz
?with_tz
with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz=Singapore)
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long <- new_interval( last_time, arrive)
as.period(how_long)
stopwatch()
install.packages("httr")
install.packages("httr")
?oauth_app
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "c29083488b7d5250b4ce")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "c29083488b7d5250b4ce")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "c29083488b7d5250b4ce")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos/datasharing", gtoken)
stop_for_status(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
?stop_for_status
install.packages("jsonlite")
json1 <- content(req)
json2 <- jsonlite::fromJSON(toJSON(json1))
json2 <- jsonlite::fromJSON(jsonlite::toJSON(json1))
json2
View(json2)
req <- GET("https://api.github.com/users/jtleek/repos/datasharing/events", gtoken)
stop_for_status(req)
json1 <- content(req)
json2 <- jsonlite::fromJSON(jsonlite::toJSON(json1))
req <- GET("https://api.github.com/users/jtleek/datasharing/events", gtoken)
stop_for_status(req)
json1 <- content(req)
json2 <- jsonlite::fromJSON(jsonlite::toJSON(json1))
req <- GET("https://api.github.com/repos/jtleek/datasharing/events", gtoken)
stop_for_status(req)
json1 <- content(req)
json2 <- jsonlite::fromJSON(jsonlite::toJSON(json1))
View(json2)
View(json2)
req <- GET("https://api.github.com/repos/jtleek/datasharing", gtoken)
stop_for_status(req)
json1 <- content(req)
json2 <- jsonlite::fromJSON(jsonlite::toJSON(json1))
View(json2)
install.packages("sqldf")
?read.csv
download.file("d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv","ACSz.csv",method="curl")
acs <- read.csv("ACSz.csv")
acs
library(sqldf)
sqldf("select * from acs where AGEP < 50")
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select distinct AGEP from acs")
con <- url("http://biostat.jhsph.edu/~jleek/contact.html ")
htmlcode <- readlines(con)
htmlcode <- readLines(con)
close(con)
htmlcode
class(htmlcode)
htmlcode[1:9]
nchar(htmlcode[10])
nchar(htmlcode[10,20,30,100])
nchar(htmlcode[c(10,20,30,100)])
download.file("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for","for.for",method="curl")
?read
?read,file
?read.file
file <- read.for("for.for")
file <- read.fortran("for.for")
?read.fortran
?readt.table
?read.table
file <- read.table("for.for")
file <- read.table("for.for", skip=1)
??fixed
?read,fortran
?read.fortran
?read.fwf
file <- read.fwf("for.for", skip=2, widths=c(15,13,13,13,9))
View(file)
file <- read.fwf("for.for", skip=3, widths=c(15,13,13,13,9))
View(file)
file <- read.fwf("for.for", skip=3, widths=c(10,-5, 4, 4, -5, 4, 4, -5, 4, 4, -5, 4, 4))
View(file)
sum(file[4])
class(file[4])
class(file[,4])
file[,4]
sum(file[,4])
file <- read.fwf("for.for", skip=4, widths=c(10,-5, 4, 4, -5, 4, 4, -5, 4, 4, -5, 4, 4))
sum(file[,4])
View(file)
?sum
head (file)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for","for.for",method="curl")
#file <- read.fortran("for.for")
#file <- read.fwf("for.for", skip=3, widths=c(15,13,13,13,9))
file <- read.fwf("for.for", skip=4, widths=c(10,-5, 4, 4, -5, 4, 4, -5, 4, 4, -5, 4, 4))
sum(file[,4])
setwd("/home/sean/DataScience/datasciencecoursera/Getting-And-Cleaning-Data/week3")
data <- readcsv("getdata%2Fdata%2Fss06hid.csv")
data <- read.csv("getdata%2Fdata%2Fss06hid.csv")
head(data)
agricultureLogical <- data[data$ACR = 3 & data$AGS=6]
agricultureLogical <- data[data$ACR == 3 & data$AGS == 6]
agricultureLogical <- data[(data$ACR == 3 & data$AGS == 6),]
head(which(agricultureLogical))
which(agricultureLogical)
View(agricultureLogical)
agricultureLogical <- (data$ACR == 3 & data$AGS == 6)
which(agricultureLogical)
head(which(agricultureLogical, n=3)
head(which(agricultureLogical, n=3)
head(which(agricultureLogical), n=3)
head(which(agricultureLogical), n=3)
?read.jpeg
??jpeg
??jpg
install.packages("jpeg")
install.packages("jpeg")
library(jpeg)
?j[eg]
?jpeg
readJPEG("getdata%2Fjeff.jpg", native = TRUE)
a <- readJPEG("getdata%2Fjeff.jpg", native = TRUE)
quantile(a, probe=c(0.3, 0.8) )
quantile(a, probs=c(0.3, 0.8) )
quantile(a, probs=c(0.3, 0.8) )
15258512 +638
15258512 -638
GDP <- read.csv("getdata%2Fdata%2FGDP.csv")
FEDSTATS <- read.csv("getdata%2Fdata%2FEDSTATS_Country.csv")
head(GDP,2)
head(FEDSTATS,2)
View(FEDSTATS)
View(GDP)
mergedData <- merge(GDP, FEDSTATS, by.x="X", by.y="CountryCode",all=True)
mergedData <- merge(GDP, FEDSTATS, by.x="X", by.y="CountryCode",all=TRUE)
View(mergedData)
?merge
mergedData <- merge(GDP, FEDSTATS, by.x="X", by.y="CountryCode")
View(mergedData)
mergedData <- merge(GDP, FEDSTATS)
class(GDP)
?arrange
?join
?merge
mergedData <- merge(GDP, FEDSTATS, by.x="X", by.y="CountryCode",all=FALSE)
mergedData <- merge(GDP, FEDSTATS, by.x="X", by.y="CountryCode",all=TRUE)
mergedData <- merge(GDP, FEDSTATS, by.x="X", by.y="CountryCode",all=FALSE)
View(mergedData)
nrows(mergedData)
nrow(mergedData)
intersect(names(FDP), names(FEDSTATS))
intersect(names(GDP), names(FEDSTATS))
names(GDP)
names(FEDSTATS)
mergedData <- merge(GDP, FEDSTATS, by.y="X", by.x="CountryCode",all=FALSE)
mergedData <- merge(GDP, FEDSTATS, by.x="X", by.y="CountryCode",all=FALSE)
?read.csv
GDP <- read.csv("getdata%2Fdata%2FGDP.csv", stringsAsFactors = FALSE)
FEDSTATS <- read.csv("getdata%2Fdata%2FEDSTATS_Country.csv", stringsAsFactors = FALSE)
View(FEDSTATS)
View(GDP)
FEDSTATS <- read.csv("getdata%2Fdata%2FEDSTATS_Country.csv", stringsAsFactors = FALSE, skip = 2)
View(FEDSTATS)
GDP <- read.csv("getdata%2Fdata%2FGDP.csv", stringsAsFactors = FALSE, skip=2)
View(GDP)
GDP <- read.csv("getdata%2Fdata%2FGDP.csv", stringsAsFactors = FALSE, skip=4)
View(GDP)
is.numeric(X.1)
is.numeric(GDP$X.1)
is.numeric(GDP$X.l)
GDP$X.1
?is.numeric
GDP$X.1,
GDP[$X.1,]
GDP[X.1,]
GDP[X.l,]
GDP[X.1,]
GDP["X.1",]
GDP["X.1"]
head(GDP["X.1"])
is.numeric(GDP["X.1"])
is.numeric(GDP["X.1",])
GDP["X.1"]
nrow(GDP["X.1"])
is.numeric(GDP["X.1",])
?which
nums <-sapply(GDP, is.numeric)
nums
nums <-sapply(GDP$X.1, is.numeric)
nums
nrow(nums)
GDP[,nums]
GDP[nums,]
nums <-sapply(GDP$X.1, is.numeric)
nums
?ready
?read.csv
GDP <- read.csv("getdata%2Fdata%2FGDP.csv", stringsAsFactors = FALSE, skip=4)
GDP <- read.csv("getdata%2Fdata%2FGDP.csv", stringsAsFactors = FALSE, skip=4, blank.lines.skip = TRUE)
GDP <- read.csv("getdata%2Fdata%2FGDP.csv", stringsAsFactors = FALSE, skip=4, blank.lines.skip = TRUE)
mergedData <- merge(GDP, FEDSTATS, by.x="X", by.y="CountryCode",all=FALSE)
View(FEDSTATS)
mergedData <- merge(GDP, FEDSTATS, by.x="X", by.y="ADO",all=FALSE)
FEDSTATS <- read.csv("getdata%2Fdata%2FEDSTATS_Country.csv", stringsAsFactors = FALSE)
View(FEDSTATS)
mergedData <- merge(GDP, FEDSTATS, by.x="X", by.y="CountryCode",all=FALSE)
View(mergedData)
mergedData <- merge(GDP, FEDSTATS, by.x="X", by.y="CountryCode")
mergedData <- merge(GDP, FEDSTATS, by.x="X", by.y="CountryCode", All=TRUE)
GDP <- read.csv("getdata%2Fdata%2FGDP.csv", stringsAsFactors = FALSE)
View(GDP)
GDP <- read.csv("getdata%2Fdata%2FGDP.csv", stringsAsFactors = FALSE)
View(GDP)
mergedData <- merge(GDP, FEDSTATS, by.x="CC", by.y="CountryCode", All=TRUE)
mergedData <- merge(GDP, FEDSTATS, by.x="CC", by.y="CountryCode", All=FALSE)
View(mergedData)
GDP <- read.csv("getdata%2Fdata%2FGDP.csv", stringsAsFactors = FALSE)
mergedData <- merge(GDP, FEDSTATS, by.x="CC", by.y="CountryCode", All=FALSE)
GDP <- read.csv("getdata%2Fdata%2FGDP.csv", stringsAsFactors = FALSE)
mergedData <- merge(GDP, FEDSTATS, by.x="CC", by.y="CountryCode", All=FALSE)
View(mergedData)
mergedData <- mergedData[order(mergedData$Ranking),]
View(mergedData)
?order
View(mergedData, decreasing = TRUE)
mergedData <- mergedData[order(mergedData$Ranking, decreasing = TRUE),]
View(mergedData, decreasing = TRUE)
View(mergedData)
GDP <- read.csv("getdata%2Fdata%2FGDP.csv", stringsAsFactors = FALSE, skip = 3)
View(GDP)
GDP[GDP$Ranking == (1:190)]
GDP$Ranking == (1:190)
GDP$Ranking <= 190
GDP$Ranking <= 190 and GDP$Ranking >=1
GDP$Ranking <= 190 & GDP$Ranking >=1
count(GDP$Ranking <= 190 & GDP$Ranking >=1)
GDP[GDP$Ranking <= 190 & GDP$Ranking >=1,]
nrow(GDP[GDP$Ranking <= 190 & GDP$Ranking >=1,])
nrow(GDP[(GDP$Ranking <= 190 & GDP$Ranking >=1),])
nrow(GDP[(GDP$Ranking <= 190 & GDP$Ranking >=1)])
nrow(GDP[(GDP$Ranking <= 190 & GDP$Ranking >=1),])
test <- nrow(GDP[(GDP$Ranking <= 190 & GDP$Ranking >=1),])
test
test <- GDP[(GDP$Ranking <= 190 & GDP$Ranking >=1),]
View(test)
?read.csv
GDP <- read.csv("getdata%2Fdata%2FGDP.csv", stringsAsFactors = FALSE, skip = 3, colClasses=c(Ranking="numeric"))
class(GDP$Ranking)
sapply(GDP, is.numeric)
sapply(GDP$Ranking, is.numeric)
GDP$Ranking
nums <-sapply(GDP$Ranking, is.numeric)
nums
class(nums)
class(nums)
GDP[nums]
GDP[nums,]
GDP[,nums]
nums
sean <-select(GDP, X, Ranking, Economy, US.dollars.)
library(dplyr)
sean <-select(GDP, X, Ranking, Economy, US.dollars.)
sean
View(sean)
a <- c(1,2 ,3, "a")
a
?df
?in
?in
??in
in
a <- c(1:190)
a
5 %in% a
nrow(GDP[GDP$Ranking %in% a,])
GDP[GDP$Ranking %in% a,]
GDP <- read.csv("getdata%2Fdata%2FGDP.csv", stringsAsFactors = FALSE, skip = 3)
View(GDP)
nrow(GDP[GDP$Ranking %in% a,])
FEDSTATS <- read.csv("getdata%2Fdata%2FEDSTATS_Country.csv", stringsAsFactors = FALSE)
View(FEDSTATS)
GDP <- GDP[GDP$Ranking %in% a,]   #### pick out countries ranked 1-190 as per the question
View(GDP)
select(GDP,X,Ranking,Economy,US.dollars)
select(GDP,X,Ranking,Economy,US.dollars.)
GDP <- select(GDP,X,Ranking,Economy,US.dollars.)
View(GDP)
mergedData <- merge(GDP, FEDSTATS, by.x="X", by.y="CountryCode", All=FALSE)
mergedData <- merge(GDP, FEDSTATS, by.x="CC", by.y="CountryCode", All=FALSE)
mergedData <- merge(GDP, FEDSTATS, by.x="X", by.y="CountryCode", All=FALSE)
View(mergedData)
mergedData <- mergedData[order(mergedData$Ranking, decreasing = TRUE),]
View(mergedData)
mergedData <- mergedData[order(mergedData$Ranking, decreasing = TRUE),]
View(mergedData)
?mutate
mergedData <- mutate(mergedData, Ranking = as.numeric(Ranking))
mergedData <- mutate(mergedData, Ranking = as.numeric(Ranking))
%>% group_by(Ranking)
mergedData <- mutate(mergedData, Ranking = as.numeric(Ranking)) %>%
group_by(Ranking)
View(mergedData)
mergedData <- mutate(mergedData, Ranking = as.integer(Ranking)) %>%
group_by(Ranking)
mergedData <- mutate(mergedData, Ranking = as.integer(Ranking))
?as.integer
class(mergedData$Ranking)
mergedData <- mutate(mergedData, Ranking = as.integer(Ranking))
mergedData <- mutate(mergedData, numRanking = as.integer(Ranking))
View(mergedData)
mergedData <- mutate(mergedData, numRanking = as.integer(Ranking)) %>%
group_by(numRanking)
View(mergedData)
?arrange
mergedData <- mutate(mergedData, numRanking = as.integer(Ranking)) %>%
arrange(desc(numRanking)
View(mergedData)
mergedData <- mutate(mergedData, numRanking = as.integer(Ranking)) %>%
arrange(desc(numRanking))
mergedData <- mutate(mergedData, numRanking = as.integer(Ranking))
mergedData <- mutate(mergedData, numRanking = as.integer(Ranking))
GDP <- read.csv("getdata%2Fdata%2FGDP.csv", stringsAsFactors = FALSE, skip = 3)
FEDSTATS <- read.csv("getdata%2Fdata%2FEDSTATS_Country.csv", stringsAsFactors = FALSE)
GDP <- GDP[GDP$Ranking %in% a,]   #### pick out countries ranked 1-190 as per the question
GDP <- select(GDP,X,Ranking,Economy,US.dollars.)
mergedData <- merge(GDP, FEDSTATS, by.x="X", by.y="CountryCode", All=FALSE)
mergedData <- mutate(mergedData, numRanking = as.integer(Ranking))
mergedData <- mutate(mergedData, numRanking = as.integer(Ranking)) %>%
mergedData <-    arrange(desc(numRanking))
mergedData <- mutate(mergedData, numRanking = as.integer(Ranking)) %>%
arrange(desc(numRanking))
View(mergedData)
GDP <- read.csv("getdata%2Fdata%2FGDP.csv", stringsAsFactors = FALSE, skip = 3)
FEDSTATS <- read.csv("getdata%2Fdata%2FEDSTATS_Country.csv", stringsAsFactors = FALSE)
GDP <- GDP[GDP$Ranking %in% a,]   #### pick out countries ranked 1-190 as per the question
GDP <- read.csv("getdata%2Fdata%2FGDP.csv", stringsAsFactors = FALSE, skip = 3)
FEDSTATS <- read.csv("getdata%2Fdata%2FEDSTATS_Country.csv", stringsAsFactors = FALSE)
GDP <- GDP[GDP$Ranking %in% c(1:190),]   #### pick out countries ranked 1-190 as per the question
GDP <- select(GDP,X,Ranking,Economy,US.dollars.)
mergedData <- merge(GDP, FEDSTATS, by.x="X", by.y="CountryCode", All=FALSE)
mergedData <- merge(GDP, FEDSTATS, by.x="X", by.y="CountryCode", All=FALSE)
mergedData <- mutate(mergedData, numRanking = as.integer(Ranking)) %>%
arrange(desc(numRanking))
View(mergedData)
mergedData <- mutate(mergedData, numRanking = as.integer(Ranking)) %>%
arrange(desc(numRanking)) %>%
means <- group_by(mergedData, Income.Group)
means <- group_by(mergedData, Income.Group)
means <- mutate(mergedData, numRanking = as.integer(Ranking)) %>%
group_by( Income.Group) %>%
summarise(mean(numRanking))
means
?quantile
quantile(mergedData$numRanking)
quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1))
?cut2
?cut
?quantile
quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1),type=1)
quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1),type=2)
quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1),type=3)
quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1),type=4)
quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1),type=5)
quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1),type=6)
quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1),type=7)
quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1),type=8)
quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1),type=9)
ungroup
ungroup(mergedData)
mergedData <- ungroup(mergedData)
quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1),type=9)
quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1),type=1)
table(quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1),type=1), Income.Group)
table(quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1),type=1), mergedData$Income.Group)
cut(mergedData$numRanking, quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1),type=1)
)
cut(mergedData$numRanking, quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1),type=2))
cut(mergedData$numRanking, quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1),type=3))
cut(mergedData$numRanking, quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1),type=4))
cut(mergedData$numRanking, quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1),type=1))
mergedData$numRankingGroups <- cut(mergedData$numRanking, quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1),type=1))
table(mergedData$numRankingGroups, Income.Group)
table(mergedData$numRankingGroups, mergedData$Income.Group)
quantile(mergedData$numRanking,probs=c(0, 0.2, 0.4, 0.6, 0.8, 1),type=1)
table(mergedData$numRankingGroups, Income.Group)
table(mergedData$numRankingGroups, mergedData$Income.Group)
