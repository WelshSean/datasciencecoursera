rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
n(by_package)
by_package
n(by_package)
n()
summarize(by_package, count = n())
summarize(by_package, count = n(), unique = n_distinct(ip_id))
summarize(by_package, count = n(), unique = n_distinct(ip_id), countries = n_distinct(country))
summarize(by_package, count = n(), unique = n_distinct(ip_id), countries = n_distinct(country), avg_bytes=mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
pack_sum
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, count > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(Result3)
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count , -grade)
res
?seperate
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
?father
?gather
submit
submit()
submit()
submit()
?spread
students3
submit()
submit()
students3
submit()
reset()
students3
submit()
submit()
submit()
submit()
extract_numeric("class5")
?mutate
submit()
submit()
submit()
submit()
?extract_numeric
submit()
submit()
submit()
rest()
reset()
submit()
submit()
View(students3)
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric(class))
submit()
quit()
swirl()
library(swirl)
swirl()
?mutate
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade
)
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric(class))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric(class))
submit()
head(students4)
students4
students4
submit()
students4
submit()
?unique
submit()
student_info <- students4 %>%
select(id, name, sex) %>%
unique() %>%
### Your code here %>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here %>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
unique() %>%
### Your code here %>%
print
submit()
submit()
passed
failed
passed <- mutate(passed, status="passed")
passed <- mutate(failed, status="failed")
failed <- mutate(failed, status="failed")
passed <- mutate(passed, status="passed")
?bind_rows
bind_rows(passed, failed)
sat
?select
?gather
?seperate
?separate
sat %>%
select(-contains(total))
sat %>%
select(-contains("total"))
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range)
at %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex,c("part","sex"))
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex,c("part","sex"))
submit()
?group_by
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by("part", "sex")
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex)
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_date)
wday(this_day)
wday(this_day, label=TRUE)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
second(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dtl
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
thus_moment
this_moment
update(this_moment, now())
update(this_moment, hours=10, minutes=16, seconds=0
)
update(this_moment, hours=10, minutes=16, seconds=0)
this_moment <- update(this_moment, hours=10, minutes=16, seconds=0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc +days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart +hours(15) + minutes(5)
arrive <- depart +hours(15) + minutes(50)
with_tz
?with_tz
with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz=Singapore)
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long <- new_interval( last_time, arrive)
as.period(how_long)
stopwatch()
install.packages("httr")
install.packages("httr")
?oauth_app
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "c29083488b7d5250b4ce")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "c29083488b7d5250b4ce")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "c29083488b7d5250b4ce")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos/datasharing", gtoken)
stop_for_status(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
?stop_for_status
install.packages("jsonlite")
json1 <- content(req)
json2 <- jsonlite::fromJSON(toJSON(json1))
json2 <- jsonlite::fromJSON(jsonlite::toJSON(json1))
json2
View(json2)
req <- GET("https://api.github.com/users/jtleek/repos/datasharing/events", gtoken)
stop_for_status(req)
json1 <- content(req)
json2 <- jsonlite::fromJSON(jsonlite::toJSON(json1))
req <- GET("https://api.github.com/users/jtleek/datasharing/events", gtoken)
stop_for_status(req)
json1 <- content(req)
json2 <- jsonlite::fromJSON(jsonlite::toJSON(json1))
req <- GET("https://api.github.com/repos/jtleek/datasharing/events", gtoken)
stop_for_status(req)
json1 <- content(req)
json2 <- jsonlite::fromJSON(jsonlite::toJSON(json1))
View(json2)
View(json2)
req <- GET("https://api.github.com/repos/jtleek/datasharing", gtoken)
stop_for_status(req)
json1 <- content(req)
json2 <- jsonlite::fromJSON(jsonlite::toJSON(json1))
View(json2)
install.packages("sqldf")
?read.csv
download.file("d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv","ACSz.csv",method="curl")
acs <- read.csv("ACSz.csv")
acs
library(sqldf)
sqldf("select * from acs where AGEP < 50")
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select distinct AGEP from acs")
con <- url("http://biostat.jhsph.edu/~jleek/contact.html ")
htmlcode <- readlines(con)
htmlcode <- readLines(con)
close(con)
htmlcode
class(htmlcode)
htmlcode[1:9]
nchar(htmlcode[10])
nchar(htmlcode[10,20,30,100])
nchar(htmlcode[c(10,20,30,100)])
download.file("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for","for.for",method="curl")
?read
?read,file
?read.file
file <- read.for("for.for")
file <- read.fortran("for.for")
?read.fortran
?readt.table
?read.table
file <- read.table("for.for")
file <- read.table("for.for", skip=1)
??fixed
?read,fortran
?read.fortran
?read.fwf
file <- read.fwf("for.for", skip=2, widths=c(15,13,13,13,9))
View(file)
file <- read.fwf("for.for", skip=3, widths=c(15,13,13,13,9))
View(file)
file <- read.fwf("for.for", skip=3, widths=c(10,-5, 4, 4, -5, 4, 4, -5, 4, 4, -5, 4, 4))
View(file)
sum(file[4])
class(file[4])
class(file[,4])
file[,4]
sum(file[,4])
file <- read.fwf("for.for", skip=4, widths=c(10,-5, 4, 4, -5, 4, 4, -5, 4, 4, -5, 4, 4))
sum(file[,4])
View(file)
?sum
head (file)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for","for.for",method="curl")
#file <- read.fortran("for.for")
#file <- read.fwf("for.for", skip=3, widths=c(15,13,13,13,9))
file <- read.fwf("for.for", skip=4, widths=c(10,-5, 4, 4, -5, 4, 4, -5, 4, 4, -5, 4, 4))
sum(file[,4])
setwd("/home/sean/DataScience/datasciencecoursera/Getting-And-Cleaning-Data/week4")
ACS <- read.csv(ACS.csv)
getwd()
?ls
?list
ACS <- read.csv("ACS.csv")
names(ACS)
?strsplit
strsplit(names(ACS), "wgtp")
wtgsplit <- strsplit(names(ACS), "wgtp")
wtgsplit(123)
wtgsplit[123]
GDP <- read.csv("GDP")
GDP <- read.csv("GDP.csv")
GDP <- read.csv("GDP.csv")
getwd()
ls
GDP <- read.csv("GDP.csv")
View(GDP)
GDPCOL <- GDP[,X.4]
GDPCOL <- GDP[,"X.4"]
GDPCOL
GDPCOL <- GDP[,"X.3"]
GDPCOL
?subset
GDP <- read.csv("GDP.csv", stringsAsFactors = FALSE)
GDPCOL <- GDP[,"X.3"]
GDPCOL
GDP <- read.csv("GDP.csv", stringsAsFactors = FALSE, skip=3)
GDPCOL <- GDP[,"X.3"]
GDPCOL
View(GDP)
View(GDP)
GDPCOL <- GDP[,"US.dollars."]
GDPCOL
GDP <- read.csv("GDP.csv", stringsAsFactors = FALSE, skip=3)
GDP <- GDP[GDP$Ranking %in% c(1:190),]   #### pick out countries ranked 1-190
GDPCOL <- GDP[,"US.dollars."]
GDPCOL
gsub(",","",GDPCOL)
GDPCOL
GDPCOL <- gsub(",","",GDPCOL)
GDPCOL
?mean
mean(GDPCOL)
as.INTEGER(GDPCOL)
as.integer(GDPCOL)
mean(as.integer(GDPCOL))
grep("^United",countryNames)?grep
?grep
countryName <- GDP[,Economy]
countryName <- GDP[,"Economy"]
countryName
countryName <- GDP[,"Economy"]
grep("^United",countryNames)
countryNames <- GDP[,"Economy"]
grep("^United",countryNames)
Sys.getlocale()
Sys.setlocale(locale="C")
Sys.getlocale()
grep("^United",countryNames)
source('~/.active-rstudio-document')
FEDSTATS <- read.csv("FEDSTATS_Country.csv", stringsAsFactors = FALSE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(mergedData)
View(mergedData)
View(FEDSTATS)
grep (mergedData[,SpecialNotes], "Fiscal year end:.*June")
grep (mergedData[,"SpecialNotes""], "Fiscal year end:.*June")
grep(mergedData[,"SpecialNotes""], "Fiscal year end:.*June")
mergedData[,"SpecialNotes""]
mergedData[,"SpecialNotes""]
grep(mergedData[,"SpecialNotes], "Fiscal year end:.*June")
mergedData[,"SpecialNotes]
grep(mergedData[,"SpecialNotes"], "Fiscal year end:.*June")
grep(mergedData[,"SpecialNotes"], "Fiscal year end:.*June")
grep(mergedData[,"Special.Notes"], "Fiscal year end:.*June")
grep(mergedData[,"SpecialNotes"], "Fiscal year end:.*June")
library("dplyr")
GDP <- read.csv("GDP.csv", stringsAsFactors = FALSE, skip = 3)
FEDSTATS <- read.csv("FEDSTATS.csv", stringsAsFactors = FALSE)
GDP <- GDP[GDP$Ranking %in% c(1:190),]   #### pick out countries ranked 1-190 as per the question
GDP <- select(GDP,X,Ranking,Economy,US.dollars.)
mergedData <- merge(GDP, FEDSTATS, by.x="X", by.y="CountryCode", All=FALSE)
mergedData <- mutate(mergedData, numRanking = as.integer(Ranking)) %>%
arrange(desc(numRanking))
grep(mergedData[,"Special.Notes"], "Fiscal year end:.*June")
SN <-mergedData[,"Special.Notes"]
SN
?grepl
grep(SN, "Fiscal year end:.*June")
grepl(SN, "Fiscal year end:.*June")
grepl(SN, "Fiscal year end:")
SN
grepl("Fiscal year end:", SN)
grep("Fiscal year end:", SN)
grep("Fiscal year end:.*June", SN)
?length
length(grep("Fiscal year end:.*June", SN))
install_package("quantmod")
install.package("quantmod")
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
amzn
View(amzn)
sampleTimes
class(sampleTimes)
as.character(sampleTimes)
val2012 <- grep ("2012-[0-9][0-9]-[0-9][0-9]", as.character(sampleTimes))
val2012
length(val2012)
d2 = sys.date()
d2 = sys.Date()
d2 <- sys.date()
d2 <- Sys.Date()
d2
format(d2, "%A")
format(sampleTimes, "%A")
format(sampleTimes, "%A-%y")
format(sampleTimes, "%A-%Y")
z <-
s
z <- format(sampleTimes, "%A-%Y")
class(z)
valMon2012 <- grep ("Monday-2012", format(sampleTimes, "%A-%Y"))
length(c(val2012, valMon2012)
length(c(val2012, valMon2012)
length(c(val2012, valMon2012)
c
length(c(val2012, valMon2012))
c(length(val2012), length(valMon2012))
ACS <- read.csv("ACS.csv")
wtgsplit <- strsplit(names(ACS), "wgtp")
wtgsplit[123]
